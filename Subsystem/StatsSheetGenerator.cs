
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using BBI.Core.Data;
using BBI.Core.Utility.FixedPoint;
using BBI.Game.Data;
using UnityEngine;

namespace Subsystem
{
	public class StatsSheetGenerator
	{
		public StatsSheetSettings settings;

		private readonly StringWriter writer;

		public StatsSheetGenerator()
		{
			writer = new StringWriter();
		}
		public StatsSheetGenerator(StatsSheetSettings settings)
		{
			writer = new StringWriter();

			this.settings = settings;
		}

		public void Generate(EntityTypeCollection entityTypeCollection)
		{
			writer.WriteLine(@"<!DOCTYPE html>
<html lang=""en"" class=""h-100"">
<head>
<meta charset=""UTF-8"">
<link rel=""stylesheet"" href=""statssheet_files/styles.css"" />
<link rel=""stylesheet"" href=""statssheet_files/Chart.min.css"" />
<title>DOK Autogenerated Stats</title>
<script type=""text/javascript"" src=""statssheet_files/Chart.bundle.min.js""></script>
</head>
<body>
<table>
<thead>
<tr>
<th colspan=""999"">Entity types</th>
</tr></thead>
<tbody>");

			if (settings.UseEntityList)
			{
				foreach (var kvp in settings.EntityList)
				{
					EntityTypeAttributes entityTypeAttributes = entityTypeCollection.GetEntityType(kvp.Key);
					if (entityTypeAttributes == null)
						Debug.Log($"[SUBSYSTEM] StatsSheetGenerator: couldn't find EntityList entity type \"{kvp.Key}\"");
					else
						OutputForEntityType(entityTypeAttributes, kvp.Value);
				}
			}
			else
			{
				foreach (var name in entityTypeCollection.GetAllEntityTypeNames())
					OutputForEntityType(entityTypeCollection.GetEntityType(name));
			}

			writer.WriteLine("</tbody></table></body></html>");

			File.WriteAllText(Path.Combine(Application.dataPath, settings.Filename), writer.ToString());
		}

		protected void OutputForEntityType(EntityTypeAttributes entityTypeAttributes, string[] selectedWeapons = null)
		{
			UnitAttributes unitAttributes = entityTypeAttributes.Get<UnitAttributes>();
			if (unitAttributes == null)
				return;

			// Unit Attributes
			writer.WriteLine(@"<tr class=""unit_attributes"">
<th class=""name"">Name</th>
<th class=""cost_cu"">CU</th>
<th class=""cost_ru"">RU</th>
<th class=""production_time"">Time</th>
<th class=""popcap"">Pop</th>
<th class=""hitpoints"">Hitpoints</th>
<th class=""armor"">Armor</th>
<th class=""sensor_radius"">SensorRadius</th>
<th class=""contact_radius"">ContactRadius</th>
<th class=""xp"">ExperienceValue</th>
</tr>");

			writer.WriteLine("<tr class=\"unit_attributes\">");
			writer.WriteLine($"<td class=\"name\">{entityTypeAttributes.Name}</td>");
			writer.WriteLine($"<td class=\"cost_cu\">{unitAttributes.Resource1Cost}</td>");
			writer.WriteLine($"<td class=\"cost_ru\">{unitAttributes.Resource2Cost}</td>");
			writer.WriteLine($"<td class=\"production_time\">{unitAttributes.ProductionTime}</td>");
			writer.WriteLine($"<td class=\"popcap\">{unitAttributes.PopCapCost}</td>");
			writer.WriteLine($"<td class=\"hitpoints\">{unitAttributes.MaxHealth}</td>");
			writer.WriteLine($"<td class=\"armor\">{unitAttributes.Armour}</td>");
			writer.WriteLine($"<td class=\"sensor_radius\">{unitAttributes.SensorRadius}</td>");
			writer.WriteLine($"<td class=\"contact_radius\">{unitAttributes.ContactRadius}</td>");
			writer.WriteLine($"<td class=\"xp\">{unitAttributes.ExperienceValue}</td>");
			writer.WriteLine($"</tr>");

			// Weapons
			if (unitAttributes.WeaponLoadout.Length > 0 && (selectedWeapons == null || selectedWeapons.Length > 0))
				OutputForWeapons(entityTypeAttributes, selectedWeapons);
		}

		protected void OutputForWeapons(EntityTypeAttributes entityTypeAttributes, string[] selectedWeapons)
		{
			WeaponAttributes[] weaponAttributes = entityTypeAttributes.GetAll<WeaponAttributes>();
			writer.WriteLine("<tr class=\"weapon_attributes\">");
			writer.WriteLine("<td colspan=\"999\">");
			writer.WriteLine("<table><thead><tr>");
			writer.WriteLine("<th colspan=\"999\">Weapon attributes</th>");
			writer.WriteLine("</tr></thead><tbody>");
			for (int i = 0; i < weaponAttributes.Length; ++i)
			{
				WeaponAttributes w = weaponAttributes[i];
				if (selectedWeapons == null || Array.IndexOf(selectedWeapons, w.Name) >= 0)
				{
					writer.WriteLine("<tr>");
					writer.WriteLine("<th class=\"weapon_name\">Weapon name</th>");
					writer.WriteLine("<th class=\"weapon_damage\">Damage</th>");
					writer.WriteLine("<th class=\"weapon_packets\">Damage packets</th>");
					writer.WriteLine("<th class=\"weapon_ranges\">Range</th>");
					writer.WriteLine("<th class=\"weapon_accuracy\">Accuracy</th>");
					writer.WriteLine("<th class=\"weapon_windup\">Wind-up</th>");
					writer.WriteLine("<th class=\"weapon_winddown\">Wind-down</th>");
					writer.WriteLine("<th class=\"weapon_rof\">ROF</th>");
					writer.WriteLine("<th class=\"weapon_burst\">Burst</th>");
					writer.WriteLine("<th class=\"weapon_numbursts\">Num bursts</th>");
					writer.WriteLine("<th class=\"weapon_cooldown\">Cooldown</th>");
					writer.WriteLine("<th class=\"weapon_reload\">Reload</th>");
					writer.WriteLine("<th class=\"weapon_aoe\">AOE</th>");
					writer.WriteLine("<th class=\"weapon_falloff\">AOE falloff</th>");
					writer.WriteLine("</tr><tr>");

					writer.WriteLine($"<td class=\"weapon_name\">{w.Name}</td>");

					writer.WriteLine($"<td class=\"weapon_damage\">{w.BaseDamagePerRound}</td>");
					writer.WriteLine($"<td class=\"weapon_packets\">{w.DamagePacketsPerShot}</td>");

					RangeBasedWeaponAttributes rangeAttrib;
					WeaponRange[] allRanges = (WeaponRange[])Enum.GetValues(typeof(WeaponRange));
					string[] rangeVals = new string[allRanges.Length];
					string[] accuracyVals = new string[allRanges.Length];
					for (int curRange = 0; curRange < allRanges.Length; ++curRange)
					{
						rangeAttrib = Array.Find(w.Ranges, r => r.Range == allRanges[curRange]);
						if (rangeAttrib == null)
						{
							rangeVals[curRange] = "-";
							accuracyVals[curRange] = "-";
						}
						else
						{
							rangeVals[curRange] = $"{Fixed64.UnsafeDoubleValue(rangeAttrib.Distance):f0}";
							accuracyVals[curRange] = $"{(Fixed64.UnsafeDoubleValue(rangeAttrib.Accuracy)*0.01):p2}";
						}
					}

					writer.WriteLine($"<td class=\"weapon_ranges\">{String.Join(" / ", rangeVals)}</td>");
					writer.WriteLine($"<td class=\"weapon_accuracy\">{String.Join(" / ", accuracyVals)}</td>");

					writer.WriteLine($"<td class=\"weapon_windup\">{(w.WindUpTimeMS * 0.001):.####}s</td>");
					writer.WriteLine($"<td class=\"weapon_winddown\">{(w.WindDownTimeMS * 0.001):.####}s</td>");
					writer.WriteLine($"<td class=\"weapon_rof\">{w.RateOfFire}</td>");
					writer.WriteLine($"<td class=\"weapon_burst\">{(w.BurstPeriodMinTimeMS * 0.001):.####}s-{(w.BurstPeriodMaxTimeMS * 0.001):.####}s</td>");
					writer.WriteLine($"<td class=\"weapon_numbursts\">{w.NumberOfBursts}</td>");
					writer.WriteLine($"<td class=\"weapon_cooldown\">{(w.CooldownTimeMS * 0.001):.####}s</td>");
					writer.WriteLine($"<td class=\"weapon_reload\">{(w.ReloadTimeMS * 0.001):.####}s</td>");
					writer.WriteLine($"<td class=\"weapon_aoe\">{w.AreaOfEffectRadius}</td>");
					writer.WriteLine($"<td class=\"weapon_falloff\">{Enum.GetName(typeof(AOEFalloffType), w.AreaOfEffectFalloffType)}</td>");

					writer.WriteLine("</tr>");

					writer.WriteLine("<tr class=\"dps\"><td colspan=\"999\">");

					WeaponDPSInfo weaponDPSInfo = new WeaponDPSInfo(w);

					writer.WriteLine("<table><thead><th colspan=\"999\">DPS statistics</th></thead><tbody>");

					writer.WriteLine("<tr class=\"dps_avg_shots_per_burst\">");

					writer.WriteLine("<th>Average shots per burst</th>");
					writer.WriteLine($"<td class=\"dps_avg_shots_per_burst\">{weaponDPSInfo.AverageShotsPerBurst:.####}</td>");

					writer.WriteLine("<td class=\"dps_chart\" rowspan=\"4\"><div>");

					int[] armorVals = { 0, 3, 6, 9, 12, 15, 18, 21, 25, 35, 50, 75, 100 };

					double maxDPS = 0;

					Dictionary<WeaponRange, double>[] armorDPS = new Dictionary<WeaponRange, double>[armorVals.Length];
					for (int j = 0; j < armorVals.Length; ++j)
					{
						armorDPS[j] = weaponDPSInfo.ArmorDPS(armorVals[j]);
						foreach (RangeBasedWeaponAttributes r in w.Ranges)
						{
							if (armorDPS[j][r.Range] > maxDPS)
								maxDPS = armorDPS[j][r.Range];
						}
					}

					if (maxDPS < 10)
						maxDPS += Math.Sqrt(10 - maxDPS);
					else
						maxDPS = Math.Max(50, maxDPS);

					writer.WriteLine($"<canvas id=\"dpsChart_{w.Name}\" width=\"550\" height=\"170\"></canvas>");
					writer.WriteLine("<script>");
					writer.WriteLine($"new Chart('dpsChart_{w.Name}',");
					writer.WriteLine($"{{type: 'line', options: {{elements: {{line: {{tension: 0.000001}}}}, scales: {{yAxes: [{{ticks: {{stepSize: {Math.Ceiling(maxDPS / 250) * 25}, min: 0, max: {Math.Ceiling(maxDPS)} }} }}] }} }}, data: {{");
					writer.WriteLine($"labels: [{String.Join(", ", armorVals.Select(a => a.ToString()).ToArray())}],");
					writer.WriteLine("datasets: [");

					double[] dpsValues = new double[armorVals.Length];
					foreach (RangeBasedWeaponAttributes r in w.Ranges)
					{
						writer.WriteLine($"{{label: 'DPS vs Armor on Range {Enum.GetName(typeof(WeaponRange), r.Range)}', data: [");

						for (int j = 0; j < armorVals.Length; ++j)
							dpsValues[j] = armorDPS[j][r.Range];

						writer.WriteLine($"{String.Join(", ", dpsValues.Select(p => p.ToString()).ToArray())}");

						writer.WriteLine("]},");
					}

					writer.WriteLine("]}});");
					writer.WriteLine("</script>");

					writer.WriteLine("</div></td>");
					writer.WriteLine("</tr>");

					writer.WriteLine("<tr class=\"dps_true_rof\">");
					writer.WriteLine("<th>True ROF</th>");
					writer.WriteLine($"<td class=\"dps_true_rof\">{weaponDPSInfo.TrueROF:.####}</td>");
					writer.WriteLine("</tr>");

					writer.WriteLine("<tr class=\"dps_sequence_duration\">");
					writer.WriteLine("<th>Sequence duration</th>");
					writer.WriteLine($"<td>{weaponDPSInfo.SequenceDuration:.####}s</td>");
					writer.WriteLine("</tr>");
					
					writer.WriteLine("<tr class=\"dps_pure\">");
					writer.WriteLine("<th>Pure DPS</th>");
					writer.WriteLine($"<td>{weaponDPSInfo.PureDPS:.####}</td>");
					writer.WriteLine("</tr>");

					writer.WriteLine("</tbody></table>");

					writer.WriteLine("</td></tr>");
				}
			}
			writer.WriteLine("</tbody></table>");
			writer.WriteLine("</td>");
			writer.WriteLine("</tr>");
		}
	}
}
